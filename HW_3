{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "1.Define a dictionary, composed with students name and their grade."
      ],
      "metadata": {
        "id": "MIfcyqQjsjW6"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jDN-aUEMshY2"
      },
      "outputs": [],
      "source": [
        "marks = {'Andrew':88, 'Alex':66, 'Jamie': 90, 'John': 55, 'Abby': 77}"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "a) Define a function, when call the function, only need to pass student’s name, your function will return this student’s grade. If the student name does not exit, print you cannot find this student’s name. "
      ],
      "metadata": {
        "id": "xh5i1H_7soeQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def find_grade(studentname):\n",
        "    for studentname,grade in marks.items():\n",
        "     if studentname==name:\n",
        "        return marks[studentname]\n",
        "    else:\n",
        "        print(\"Studen's name could not be found.\")"
      ],
      "metadata": {
        "id": "k41cSbXGssGZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "b) Define another function that will return the average grade for all the students."
      ],
      "metadata": {
        "id": "GeaeopWKssev"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def find_average_grade(marks_dict):\n",
        "    total_grades=sum(marks_dict.values())\n",
        "    num_students=len(marks_dict)\n",
        "    if num_students > 0:\n",
        "        return total_grades / num_students #returning the average\n",
        "    else:\n",
        "        return 0 #just making sure because no number will be <0 in this case"
      ],
      "metadata": {
        "id": "m6qcGmrIsyf5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Define a function. Using While Loop. As long as n is less than num, print out n and square of n. Otherwise, print out “greater than” the num value. When you call your function, specify the num values\n",
        "as 8."
      ],
      "metadata": {
        "id": "Hvxu5JhYszjX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def print_squaren(num):\n",
        "    n=0\n",
        "    while n<num:\n",
        "        print(f\"{n} squared is {n**2}\") #printing out n and square of n\n",
        "        n+=1\n",
        "    else:\n",
        "        print(\"greater than\", num)"
      ],
      "metadata": {
        "id": "8BbDfkyxs9D8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print_squaren(8)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jG1P2hwewIeF",
        "outputId": "cba562aa-7bc5-49a8-a355-5f786f431791"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 squared is 0\n",
            "1 squared is 1\n",
            "2 squared is 4\n",
            "3 squared is 9\n",
            "4 squared is 16\n",
            "5 squared is 25\n",
            "6 squared is 36\n",
            "7 squared is 49\n",
            "greater than 8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. Define a function. add all the integers from 1 to num, print out the sum. Using while loop. "
      ],
      "metadata": {
        "id": "NB44bvDHs9TE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def add_numbers(num):\n",
        "    sum=0\n",
        "    n=1 #start at 1\n",
        "    while n<=num:\n",
        "        sum+=n\n",
        "        n+=1\n",
        "    print(f\"The sum from 1 to {num} is {sum}\")"
      ],
      "metadata": {
        "id": "c8ekHRYFtBdt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "add_numbers(50) #varying number varies results"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-ahalvwcwrPz",
        "outputId": "dd97b6b5-8b7a-4fae-d301-5e526818532b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The sum from 1 to 50 is 1275\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. Define a function. add all the integers from 1 to num, print out the sum at each step/iteration. Using for loop. "
      ],
      "metadata": {
        "id": "oZnXxh7ltBpb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def add_numbers(num):\n",
        "    sum=0\n",
        "    for n in range(1,num+1):\n",
        "        sum+=n\n",
        "        print(f\"The sum from 1 to {n} is {sum}\") #going by each number \n",
        "    print(f\"The final sum from 1 to {num} is {sum}\") #giving the total final"
      ],
      "metadata": {
        "id": "MbWI9D5btFHj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "add_numbers(6) #i picked 6 because it's a small number and the result gets shorter step by step"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MK-8WdOMxufr",
        "outputId": "e9969595-a106-438f-c658-92e6fa9f7108"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The sum from 1 to 1 is 1\n",
            "The sum from 1 to 2 is 3\n",
            "The sum from 1 to 3 is 6\n",
            "The sum from 1 to 4 is 10\n",
            "The sum from 1 to 5 is 15\n",
            "The sum from 1 to 6 is 21\n",
            "The final sum from 1 to 6 is 21\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. Define a function. For a given list, range (1, 100), calculate its mean, sum, and standard deviation. You can use built in function and package. "
      ],
      "metadata": {
        "id": "lYr_sztmtFUF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import statistics\n",
        "\n",
        "def calculate_stats(num_list):\n",
        "    mean=statistics.mean(num_list)\n",
        "    sum_=sum(num_list) #had to do this different because the funcion sum was giving error\n",
        "    std_dev=statistics.stdev(num_list)\n",
        "    print(f\"Mean:{mean:.2f}\") \n",
        "    print(f\"Sum:{sum_:.2f}\")\n",
        "    print(f\"Standard deviation:{std_dev:.2f}\")"
      ],
      "metadata": {
        "id": "HFTXBCMiy7Ys"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "num_list=list(range(1, 100)) #defining specific range\n",
        "calculate_stats(num_list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hFL5LWA9zqNC",
        "outputId": "b4bfead4-c7f6-44de-fa08-d58726f946ff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean:50.00\n",
            "Sum:4950.00\n",
            "Standard deviation:28.72\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "6. Define a minimal function yourself, with 4 arguments. Your function will return the minimal value of the 4 arguments. Do not use the python built-in functions. Print out the returned value."
      ],
      "metadata": {
        "id": "U5dvgHjBtIbB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def find_min(sun, moon, stars, planets):\n",
        "    min_val = sun\n",
        "    if moon < min_val:\n",
        "        min_val = moon\n",
        "    if stars < min_val:\n",
        "        min_val = stars\n",
        "    if planets < min_val:\n",
        "        min_val = planets\n",
        "    return min_val"
      ],
      "metadata": {
        "id": "XH_jiOijtPx5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(find_min(5, 10, 2, 8))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CpstRKAp0Wp0",
        "outputId": "cea636af-3016-4b5e-d7ce-ccc3d24882e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "7. Write a function that concatenates 3 strings and return the concatenated string. print out this returned string. This function could have 3 parameters that represent 3 strings, or could be a list containing 3 strings."
      ],
      "metadata": {
        "id": "ouVQzuL8tQDj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def concatenate_strings(str1, str2, str3):\n",
        "    concatenated_str = str1 + str2 + str3\n",
        "    return concatenated_str"
      ],
      "metadata": {
        "id": "9uK27akptWZE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "string_list=['Hi,', ' I am', ' Isabella']\n",
        "result=concatenate_strings(*string_list)\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_CxN4Wjz1qY6",
        "outputId": "5df1a96e-3df0-4ccb-fb6d-396337e34a3a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hi, I am Isabella\n"
          ]
        }
      ]
    }
  ]
}